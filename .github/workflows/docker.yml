name: docker

on:
  workflow_call:
    inputs:
      image_tag:
        type: string
        required: true
      push:
        type: boolean
        required: false
    secrets:
      GCP_PROJECT_ID:
        required: false
      GCP_PROJECT_NUMBER:
        required: true

env:
  GAR_REPOSITORY: ww24
  GCP_LOCATION: asia-northeast1

jobs:
  docker_build:
    name: Build docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    strategy:
      matrix:
        target: [linebot, screenshot]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - uses: hadolint/hadolint-action@v2.1.0
        with:
          dockerfile: docker/${{ matrix.target }}/Dockerfile
          ignore: DL3008
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      - name: Build docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/${{ matrix.target }}/Dockerfile
          push: false
          outputs: type=docker
          tags: "${{ matrix.target }}:${{ github.sha }}"
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: "${{ matrix.target }}:${{ github.sha }}"
          severity: CRITICAL,HIGH
          ignore-unfixed: true
          format: sarif
          output: trivy-results.sarif
      - name: Upload Trivy scan results to GitHub Security tab
        if: always()
        uses: github/codeql-action/upload-sarif@v1
        with:
          sarif_file: trivy-results.sarif

  docker_push:
    if: inputs.push
    needs: [docker_build]
    name: Build and push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    strategy:
      matrix:
        target: [linebot, screenshot]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      - name: Output docker build params
        id: params
        run: |
          platforms="linux/amd64"
          if [[ "${{ matrix.target }}" == "linebot" ]]; then
            platforms="linux/amd64,linux/arm64"
          fi

          version="v${{ inputs.image_tag }}"
          if [[ "${{ inputs.image_tag }}" == "latest" ]]; then
            version="latest"
          fi

          echo "::set-output name=platforms::$platforms"
          echo "::set-output name=version::$version"
      - name: Build and push docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/${{ matrix.target }}/Dockerfile
          platforms: ${{ steps.params.outputs.platforms }}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          build-args: |
            VERSION=${{ steps.params.outputs.version }}
          tags: |
            ghcr.io/${{ github.repository_owner }}/${{ matrix.target }}:${{ inputs.image_tag }}

  docker_push_gar:
    if: inputs.image_tag != 'latest'
    needs: [docker_build]
    name: Build and push docker image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      id-token: write
    strategy:
      matrix:
        target: [linebot, screenshot]
    steps:
      - uses: actions/checkout@v3
      - uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-
      - name: Setup docker buildx
        uses: docker/setup-buildx-action@v1
      - uses: "google-github-actions/auth@v0"
        with:
          workload_identity_provider: "projects/${{ secrets.GCP_PROJECT_NUMBER }}/locations/global/workloadIdentityPools/github-actions/providers/github-actions"
          service_account: "github-gar@${{ secrets.GCP_PROJECT_ID }}.iam.gserviceaccount.com"
      - name: Build and push docker image (${{ env.GCP_LOCATION }}-docker.pkg.dev)
        uses: docker/build-push-action@v2
        with:
          context: .
          file: docker/${{ matrix.target }}/Dockerfile
          platforms: linux/amd64
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache
          push: true
          build-args: |
            VERSION=v${{ inputs.image_tag }}
          tags: |
            ${{ env.GCP_LOCATION }}-docker.pkg.dev/${{ secrets.GCP_PROJECT_ID }}/${{ env.GAR_REPOSITORY }}/${{ matrix.target }}:${{ inputs.image_tag }}
