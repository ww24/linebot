// Code generated by MockGen. DO NOT EDIT.
// Source: nl.go
//
// Generated by this command:
//
//	mockgen -source=nl.go -destination=../../mock/mock_repository/mock_nl.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	reflect "reflect"

	model "github.com/ww24/linebot/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockNLParser is a mock of NLParser interface.
type MockNLParser struct {
	ctrl     *gomock.Controller
	recorder *MockNLParserMockRecorder
}

// MockNLParserMockRecorder is the mock recorder for MockNLParser.
type MockNLParserMockRecorder struct {
	mock *MockNLParser
}

// NewMockNLParser creates a new mock instance.
func NewMockNLParser(ctrl *gomock.Controller) *MockNLParser {
	mock := &MockNLParser{ctrl: ctrl}
	mock.recorder = &MockNLParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockNLParser) EXPECT() *MockNLParserMockRecorder {
	return m.recorder
}

// Parse mocks base method.
func (m *MockNLParser) Parse(arg0 string) *model.Item {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Parse", arg0)
	ret0, _ := ret[0].(*model.Item)
	return ret0
}

// Parse indicates an expected call of Parse.
func (mr *MockNLParserMockRecorder) Parse(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Parse", reflect.TypeOf((*MockNLParser)(nil).Parse), arg0)
}
