// Code generated by MockGen. DO NOT EDIT.
// Source: weather.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	io "io"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockWeather is a mock of Weather interface.
type MockWeather struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherMockRecorder
}

// MockWeatherMockRecorder is the mock recorder for MockWeather.
type MockWeatherMockRecorder struct {
	mock *MockWeather
}

// NewMockWeather creates a new mock instance.
func NewMockWeather(ctrl *gomock.Controller) *MockWeather {
	mock := &MockWeather{ctrl: ctrl}
	mock.recorder = &MockWeatherMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeather) EXPECT() *MockWeatherMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockWeather) Fetch(arg0 context.Context) (io.ReadCloser, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Fetch indicates an expected call of Fetch.
func (mr *MockWeatherMockRecorder) Fetch(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockWeather)(nil).Fetch), arg0)
}

// MockWeatherImageStore is a mock of WeatherImageStore interface.
type MockWeatherImageStore struct {
	ctrl     *gomock.Controller
	recorder *MockWeatherImageStoreMockRecorder
}

// MockWeatherImageStoreMockRecorder is the mock recorder for MockWeatherImageStore.
type MockWeatherImageStoreMockRecorder struct {
	mock *MockWeatherImageStore
}

// NewMockWeatherImageStore creates a new mock instance.
func NewMockWeatherImageStore(ctrl *gomock.Controller) *MockWeatherImageStore {
	mock := &MockWeatherImageStore{ctrl: ctrl}
	mock.recorder = &MockWeatherImageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWeatherImageStore) EXPECT() *MockWeatherImageStoreMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockWeatherImageStore) Get(arg0 context.Context, arg1 time.Time, arg2 time.Duration) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockWeatherImageStoreMockRecorder) Get(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockWeatherImageStore)(nil).Get), arg0, arg1, arg2)
}

// Save mocks base method.
func (m *MockWeatherImageStore) Save(arg0 context.Context, arg1 io.Reader, arg2 time.Time) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Save indicates an expected call of Save.
func (mr *MockWeatherImageStoreMockRecorder) Save(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockWeatherImageStore)(nil).Save), arg0, arg1, arg2)
}

// MockImageStore is a mock of ImageStore interface.
type MockImageStore struct {
	ctrl     *gomock.Controller
	recorder *MockImageStoreMockRecorder
}

// MockImageStoreMockRecorder is the mock recorder for MockImageStore.
type MockImageStoreMockRecorder struct {
	mock *MockImageStore
}

// NewMockImageStore creates a new mock instance.
func NewMockImageStore(ctrl *gomock.Controller) *MockImageStore {
	mock := &MockImageStore{ctrl: ctrl}
	mock.recorder = &MockImageStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageStore) EXPECT() *MockImageStoreMockRecorder {
	return m.recorder
}

// Fetch mocks base method.
func (m *MockImageStore) Fetch(arg0 context.Context, arg1 string) (io.ReadCloser, int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Fetch", arg0, arg1)
	ret0, _ := ret[0].(io.ReadCloser)
	ret1, _ := ret[1].(int)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// Fetch indicates an expected call of Fetch.
func (mr *MockImageStoreMockRecorder) Fetch(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fetch", reflect.TypeOf((*MockImageStore)(nil).Fetch), arg0, arg1)
}
