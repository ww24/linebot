// Code generated by MockGen. DO NOT EDIT.
// Source: shopping.go
//
// Generated by this command:
//
//	mockgen -source=shopping.go -destination=../../mock/mock_repository/mock_shopping.go -package=mock_repository
//

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	model "github.com/ww24/linebot/domain/model"
	gomock "go.uber.org/mock/gomock"
)

// MockShopping is a mock of Shopping interface.
type MockShopping struct {
	ctrl     *gomock.Controller
	recorder *MockShoppingMockRecorder
}

// MockShoppingMockRecorder is the mock recorder for MockShopping.
type MockShoppingMockRecorder struct {
	mock *MockShopping
}

// NewMockShopping creates a new mock instance.
func NewMockShopping(ctrl *gomock.Controller) *MockShopping {
	mock := &MockShopping{ctrl: ctrl}
	mock.recorder = &MockShoppingMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockShopping) EXPECT() *MockShoppingMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockShopping) Add(arg0 context.Context, arg1 ...*model.ShoppingItem) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Add", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockShoppingMockRecorder) Add(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockShopping)(nil).Add), varargs...)
}

// BatchDelete mocks base method.
func (m *MockShopping) BatchDelete(ctx context.Context, conversationID model.ConversationID, ids []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchDelete", ctx, conversationID, ids)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchDelete indicates an expected call of BatchDelete.
func (mr *MockShoppingMockRecorder) BatchDelete(ctx, conversationID, ids any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchDelete", reflect.TypeOf((*MockShopping)(nil).BatchDelete), ctx, conversationID, ids)
}

// DeleteAll mocks base method.
func (m *MockShopping) DeleteAll(arg0 context.Context, arg1 model.ConversationID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAll", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAll indicates an expected call of DeleteAll.
func (mr *MockShoppingMockRecorder) DeleteAll(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAll", reflect.TypeOf((*MockShopping)(nil).DeleteAll), arg0, arg1)
}

// Find mocks base method.
func (m *MockShopping) Find(arg0 context.Context, arg1 model.ConversationID) ([]*model.ShoppingItem, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].([]*model.ShoppingItem)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find.
func (mr *MockShoppingMockRecorder) Find(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockShopping)(nil).Find), arg0, arg1)
}
