// Code generated by MockGen. DO NOT EDIT.
// Source: conversation.go

// Package mock_repository is a generated GoMock package.
package mock_repository

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/ww24/linebot/domain/model"
)

// MockConversation is a mock of Conversation interface.
type MockConversation struct {
	ctrl     *gomock.Controller
	recorder *MockConversationMockRecorder
}

// MockConversationMockRecorder is the mock recorder for MockConversation.
type MockConversationMockRecorder struct {
	mock *MockConversation
}

// NewMockConversation creates a new mock instance.
func NewMockConversation(ctrl *gomock.Controller) *MockConversation {
	mock := &MockConversation{ctrl: ctrl}
	mock.recorder = &MockConversationMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConversation) EXPECT() *MockConversationMockRecorder {
	return m.recorder
}

// GetStatus mocks base method.
func (m *MockConversation) GetStatus(arg0 context.Context, arg1 model.ConversationID) (*model.ConversationStatus, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatus", arg0, arg1)
	ret0, _ := ret[0].(*model.ConversationStatus)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatus indicates an expected call of GetStatus.
func (mr *MockConversationMockRecorder) GetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatus", reflect.TypeOf((*MockConversation)(nil).GetStatus), arg0, arg1)
}

// SetStatus mocks base method.
func (m *MockConversation) SetStatus(arg0 context.Context, arg1 *model.ConversationStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetStatus", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetStatus indicates an expected call of SetStatus.
func (mr *MockConversationMockRecorder) SetStatus(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetStatus", reflect.TypeOf((*MockConversation)(nil).SetStatus), arg0, arg1)
}
