// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"context"
	"github.com/ww24/linebot/config"
	"github.com/ww24/linebot/domain/service"
	"github.com/ww24/linebot/infra/external/linebot"
	"github.com/ww24/linebot/infra/firestore"
	"github.com/ww24/linebot/interactor"
	"github.com/ww24/linebot/nl"
	"github.com/ww24/linebot/presentation/http"
)

// Injectors from wire.go:

func register(contextContext context.Context) (*bot, error) {
	logger, err := newLogger(contextContext)
	if err != nil {
		return nil, err
	}
	configConfig := config.NewConfig()
	lineBot, err := linebot.NewLINEBot(configConfig, logger)
	if err != nil {
		return nil, err
	}
	messageProviderSet := linebot.NewMessageProviderSet()
	botImpl := service.NewBot(lineBot, messageProviderSet)
	client, err := firestore.New(contextContext)
	if err != nil {
		return nil, err
	}
	conversation := firestore.NewConversation(client)
	shoppingImpl, err := service.NewShopping(conversation)
	if err != nil {
		return nil, err
	}
	parser, err := nl.NewParser()
	if err != nil {
		return nil, err
	}
	eventHandler, err := interactor.NewEventHandler(shoppingImpl, parser, messageProviderSet, botImpl, configConfig, logger)
	if err != nil {
		return nil, err
	}
	handler := http.NewHandler(logger, botImpl, eventHandler)
	mainBot := newBot(logger, handler)
	return mainBot, nil
}
