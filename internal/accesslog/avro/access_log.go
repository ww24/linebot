// Code generated by github.com/actgardner/gogen-avro/v10. DO NOT EDIT.
/*
 * SOURCE:
 *     v1.avsc
 */
package avro

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/actgardner/gogen-avro/v10/compiler"
	"github.com/actgardner/gogen-avro/v10/vm"
	"github.com/actgardner/gogen-avro/v10/vm/types"
)

var _ = fmt.Printf

type AccessLog struct {
	Timestamp *UnionNullLong `json:"timestamp"`

	Id *UnionNullString `json:"id"`

	TraceId *UnionNullString `json:"traceId"`

	Ip *UnionNullString `json:"ip"`

	UserAgent *UnionNullString `json:"userAgent"`

	Method *UnionNullString `json:"method"`

	Path *UnionNullString `json:"path"`

	Query *UnionNullString `json:"query"`

	Status *UnionNullInt `json:"status"`

	Duration *UnionNullInt `json:"duration"`

	RequestSize *UnionNullInt `json:"requestSize"`

	ResponseSize *UnionNullInt `json:"responseSize"`
}

const AccessLogAvroCRC64Fingerprint = "6/gH\xee\x1e\a\x9e"

func NewAccessLog() AccessLog {
	r := AccessLog{}
	r.Timestamp = nil
	return r
}

func DeserializeAccessLog(r io.Reader) (AccessLog, error) {
	t := NewAccessLog()
	deser, err := compiler.CompileSchemaBytes([]byte(t.Schema()), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func DeserializeAccessLogFromSchema(r io.Reader, schema string) (AccessLog, error) {
	t := NewAccessLog()

	deser, err := compiler.CompileSchemaBytes([]byte(schema), []byte(t.Schema()))
	if err != nil {
		return t, err
	}

	err = vm.Eval(r, deser, &t)
	return t, err
}

func writeAccessLog(r AccessLog, w io.Writer) error {
	var err error
	err = writeUnionNullLong(r.Timestamp, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Id, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.TraceId, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Ip, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.UserAgent, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Method, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Path, w)
	if err != nil {
		return err
	}
	err = writeUnionNullString(r.Query, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Status, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.Duration, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.RequestSize, w)
	if err != nil {
		return err
	}
	err = writeUnionNullInt(r.ResponseSize, w)
	if err != nil {
		return err
	}
	return err
}

func (r AccessLog) Serialize(w io.Writer) error {
	return writeAccessLog(r, w)
}

func (r AccessLog) Schema() string {
	return "{\"fields\":[{\"default\":null,\"name\":\"timestamp\",\"type\":[\"null\",{\"logicalType\":\"timestamp-micros\",\"type\":\"long\"}]},{\"name\":\"id\",\"type\":[\"null\",\"string\"]},{\"name\":\"traceId\",\"type\":[\"null\",\"string\"]},{\"name\":\"ip\",\"type\":[\"null\",\"string\"]},{\"name\":\"userAgent\",\"type\":[\"null\",\"string\"]},{\"name\":\"method\",\"type\":[\"null\",\"string\"]},{\"name\":\"path\",\"type\":[\"null\",\"string\"]},{\"name\":\"query\",\"type\":[\"null\",\"string\"]},{\"name\":\"status\",\"type\":[\"null\",\"int\"]},{\"name\":\"duration\",\"type\":[\"null\",\"int\"]},{\"name\":\"requestSize\",\"type\":[\"null\",\"int\"]},{\"name\":\"responseSize\",\"type\":[\"null\",\"int\"]}],\"name\":\"AccessLog\",\"type\":\"record\"}"
}

func (r AccessLog) SchemaName() string {
	return "AccessLog"
}

func (_ AccessLog) SetBoolean(v bool)    { panic("Unsupported operation") }
func (_ AccessLog) SetInt(v int32)       { panic("Unsupported operation") }
func (_ AccessLog) SetLong(v int64)      { panic("Unsupported operation") }
func (_ AccessLog) SetFloat(v float32)   { panic("Unsupported operation") }
func (_ AccessLog) SetDouble(v float64)  { panic("Unsupported operation") }
func (_ AccessLog) SetBytes(v []byte)    { panic("Unsupported operation") }
func (_ AccessLog) SetString(v string)   { panic("Unsupported operation") }
func (_ AccessLog) SetUnionElem(v int64) { panic("Unsupported operation") }

func (r *AccessLog) Get(i int) types.Field {
	switch i {
	case 0:
		r.Timestamp = NewUnionNullLong()

		return r.Timestamp
	case 1:
		r.Id = NewUnionNullString()

		return r.Id
	case 2:
		r.TraceId = NewUnionNullString()

		return r.TraceId
	case 3:
		r.Ip = NewUnionNullString()

		return r.Ip
	case 4:
		r.UserAgent = NewUnionNullString()

		return r.UserAgent
	case 5:
		r.Method = NewUnionNullString()

		return r.Method
	case 6:
		r.Path = NewUnionNullString()

		return r.Path
	case 7:
		r.Query = NewUnionNullString()

		return r.Query
	case 8:
		r.Status = NewUnionNullInt()

		return r.Status
	case 9:
		r.Duration = NewUnionNullInt()

		return r.Duration
	case 10:
		r.RequestSize = NewUnionNullInt()

		return r.RequestSize
	case 11:
		r.ResponseSize = NewUnionNullInt()

		return r.ResponseSize
	}
	panic("Unknown field index")
}

func (r *AccessLog) SetDefault(i int) {
	switch i {
	case 0:
		r.Timestamp = nil
		return
	}
	panic("Unknown field index")
}

func (r *AccessLog) NullField(i int) {
	switch i {
	case 0:
		r.Timestamp = nil
		return
	case 1:
		r.Id = nil
		return
	case 2:
		r.TraceId = nil
		return
	case 3:
		r.Ip = nil
		return
	case 4:
		r.UserAgent = nil
		return
	case 5:
		r.Method = nil
		return
	case 6:
		r.Path = nil
		return
	case 7:
		r.Query = nil
		return
	case 8:
		r.Status = nil
		return
	case 9:
		r.Duration = nil
		return
	case 10:
		r.RequestSize = nil
		return
	case 11:
		r.ResponseSize = nil
		return
	}
	panic("Not a nullable field index")
}

func (_ AccessLog) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ AccessLog) AppendArray() types.Field         { panic("Unsupported operation") }
func (_ AccessLog) HintSize(int)                     { panic("Unsupported operation") }
func (_ AccessLog) Finalize()                        {}

func (_ AccessLog) AvroCRC64Fingerprint() []byte {
	return []byte(AccessLogAvroCRC64Fingerprint)
}

func (r AccessLog) MarshalJSON() ([]byte, error) {
	var err error
	output := make(map[string]json.RawMessage)
	output["timestamp"], err = json.Marshal(r.Timestamp)
	if err != nil {
		return nil, err
	}
	output["id"], err = json.Marshal(r.Id)
	if err != nil {
		return nil, err
	}
	output["traceId"], err = json.Marshal(r.TraceId)
	if err != nil {
		return nil, err
	}
	output["ip"], err = json.Marshal(r.Ip)
	if err != nil {
		return nil, err
	}
	output["userAgent"], err = json.Marshal(r.UserAgent)
	if err != nil {
		return nil, err
	}
	output["method"], err = json.Marshal(r.Method)
	if err != nil {
		return nil, err
	}
	output["path"], err = json.Marshal(r.Path)
	if err != nil {
		return nil, err
	}
	output["query"], err = json.Marshal(r.Query)
	if err != nil {
		return nil, err
	}
	output["status"], err = json.Marshal(r.Status)
	if err != nil {
		return nil, err
	}
	output["duration"], err = json.Marshal(r.Duration)
	if err != nil {
		return nil, err
	}
	output["requestSize"], err = json.Marshal(r.RequestSize)
	if err != nil {
		return nil, err
	}
	output["responseSize"], err = json.Marshal(r.ResponseSize)
	if err != nil {
		return nil, err
	}
	return json.Marshal(output)
}

func (r *AccessLog) UnmarshalJSON(data []byte) error {
	var fields map[string]json.RawMessage
	if err := json.Unmarshal(data, &fields); err != nil {
		return err
	}

	var val json.RawMessage
	val = func() json.RawMessage {
		if v, ok := fields["timestamp"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Timestamp); err != nil {
			return err
		}
	} else {
		r.Timestamp = NewUnionNullLong()

		r.Timestamp = nil
	}
	val = func() json.RawMessage {
		if v, ok := fields["id"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Id); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for id")
	}
	val = func() json.RawMessage {
		if v, ok := fields["traceId"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.TraceId); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for traceId")
	}
	val = func() json.RawMessage {
		if v, ok := fields["ip"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Ip); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for ip")
	}
	val = func() json.RawMessage {
		if v, ok := fields["userAgent"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.UserAgent); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for userAgent")
	}
	val = func() json.RawMessage {
		if v, ok := fields["method"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Method); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for method")
	}
	val = func() json.RawMessage {
		if v, ok := fields["path"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Path); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for path")
	}
	val = func() json.RawMessage {
		if v, ok := fields["query"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Query); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for query")
	}
	val = func() json.RawMessage {
		if v, ok := fields["status"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Status); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for status")
	}
	val = func() json.RawMessage {
		if v, ok := fields["duration"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.Duration); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for duration")
	}
	val = func() json.RawMessage {
		if v, ok := fields["requestSize"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.RequestSize); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for requestSize")
	}
	val = func() json.RawMessage {
		if v, ok := fields["responseSize"]; ok {
			return v
		}
		return nil
	}()

	if val != nil {
		if err := json.Unmarshal([]byte(val), &r.ResponseSize); err != nil {
			return err
		}
	} else {
		return fmt.Errorf("no value specified for responseSize")
	}
	return nil
}
